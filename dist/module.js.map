{"mappings":"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","sources":["src/index.ts","src/helpers.context.ts","src/inner/index.ts","src/inner/extend-config.helper.ts","src/inner/escape.helper.ts","src/inner/tag.decorator.ts","src/outer/url-matcher.helper.ts","src/outer/parse-custom-query.helper.ts"],"sourcesContent":["import { HelperContext, defaultHelperContext } from './helpers.context';\r\nimport { tagDecorator, extendConfig, escape } from './inner';\r\n\r\nimport { urlMatcherHelper } from './outer/url-matcher.helper';\r\nimport { parseCustomQuery } from './outer/parse-custom-query.helper';\r\n\r\nexport interface E2EHelpersConfig {\r\n    customSelectorAttr?: string\r\n    customSelectorParamAttrPrefix?: string\r\n    customSelectorPrefix?: string\r\n    pseudoSelectorPrefix?: string\r\n    pseudoSelectorMap?: Record<string, string>\r\n}\r\n\r\nexport function e2eHelpersFactory(config: E2EHelpersConfig) {\r\n    const mergedCtx: HelperContext = extendConfig(defaultHelperContext, {\r\n        customSelectorAttr: config.customSelectorAttr,\r\n        customSelectorParamAttrPrefix: config.customSelectorParamAttrPrefix,\r\n        customSelectorPrefix: config.customSelectorPrefix,\r\n        pseudoSelectorPrefix: config.pseudoSelectorPrefix,\r\n        pseudoSelectorMap: config.pseudoSelectorMap\r\n    });\r\n\r\n    const ctx: HelperContext = {\r\n        ...mergedCtx,\r\n        _customSelectorPrefixEscaped: escape(mergedCtx.customSelectorPrefix),\r\n        _pseudoSelectorPrefixEscaped: escape(mergedCtx.pseudoSelectorPrefix)\r\n    }\r\n\r\n    return {\r\n        r: tagDecorator(urlMatcherHelper, ctx),\r\n        q: tagDecorator(parseCustomQuery, ctx),\r\n    }\r\n}\r\n","export type HelperFunction = (this: HelperContext, ...args: any[]) => any\r\n\r\nexport interface HelperContext {\r\n    customSelectorAttr: string\r\n    customSelectorParamAttrPrefix: string\r\n    customSelectorPrefix: string\r\n    pseudoSelectorPrefix: string\r\n    pseudoSelectorMap: Record<string, string>\r\n    readonly _customSelectorPrefixEscaped: string\r\n    readonly _pseudoSelectorPrefixEscaped: string\r\n}\r\n\r\nexport const defaultHelperContext: HelperContext = {\r\n    customSelectorAttr: 'data-test-id',\r\n    customSelectorParamAttrPrefix: 'data-test-',\r\n    customSelectorPrefix: '%',\r\n    pseudoSelectorPrefix: '%%',\r\n    pseudoSelectorMap: {},\r\n    _customSelectorPrefixEscaped: '',\r\n    _pseudoSelectorPrefixEscaped: '',\r\n}\r\n","export * from './extend-config.helper';\r\nexport * from './escape.helper';\r\nexport * from './tag.decorator';\r\n","export function extendConfig<\r\n    T extends Record<keyof T, any>,\r\n    U extends Partial<T>\r\n>(config1: T, config2: U): T {\r\n    type C2KeyValueTuplet = [keyof T, T[keyof T]];\r\n\r\n    return (Object.entries(config2) as Array<C2KeyValueTuplet>)\r\n        .reduce(mergeReducer, { ...config1 } as T);\r\n\r\n    ///\r\n\r\n    function mergeReducer(config: T, [key, value]: C2KeyValueTuplet): T {\r\n        if (value !== undefined) {\r\n            config[key] = value;\r\n        }\r\n        return config;\r\n    }\r\n}\r\n","const charsToEscape = '.+*?^$()[]{}|\\\\';\r\n\r\nexport function escape(rawStr: string): string {\r\n    return rawStr.replaceAll(\r\n        new RegExp(`[${charsToEscape}]`, 'g'),\r\n        '\\\\$&'\r\n    )\r\n}\r\n","import { HelperFunction, HelperContext } from '../helpers.context';\r\n\r\ntype TagFunction<F extends HelperFunction> = (parts: TemplateStringsArray, values?: any[]) => ReturnType<F>;\r\ntype PlainFunction<F extends HelperFunction> = (values: Parameters<F>) => ReturnType<F>;\r\n\r\nexport function tagDecorator<F extends HelperFunction>\r\n  (fn: F, ctx: HelperContext): TagFunction<F> & PlainFunction<F> {\r\n  return function wrapper(...args): ReturnType<F> {\r\n    const [firstArg] = args;\r\n    const isTagFunction = (\r\n        Array.isArray(firstArg) &&\r\n        'raw' in firstArg\r\n    );\r\n\r\n    if (isTagFunction) {\r\n      const [parts, ...values] = args as [TemplateStringsArray, ...any[]];\r\n      const value = compileTemplateString(parts, values);\r\n      return fn.apply(ctx, [value]);\r\n    }\r\n\r\n    return fn.apply(ctx, args);\r\n  }\r\n}\r\n\r\n///\r\n\r\nfunction compileTemplateString(parts: TemplateStringsArray, values: any[] = []): string {\r\n  return parts.reduce(partsReducer, '');\r\n\r\n  function partsReducer(res: string, part: string, index: number) {\r\n    return res + part + (values[index] ?? '');\r\n  }\r\n}\r\n","import { HelperContext } from '../helpers.context';\r\n\r\nexport function urlMatcherHelper(this: HelperContext, urlPattern: string): RegExp {\r\n  const patternStr = urlPattern\r\n    .replace(/(^|\\/)\\*\\*(\\/|$)/g, '$1.+$2')\r\n    .replace('*', '[^/]+')\r\n    .replace(/:([a-z_]+)(?:<([^>]+)>)?/gi, paramsReplacer);\r\n\r\n  return new RegExp(`^${patternStr}$`);\r\n\r\n  ///\r\n\r\n  function paramsReplacer(match: string, name: string, rule: string): string {\r\n    const defaultRule = '[^/]+';\r\n    return `(?<${name}>${rule ?? defaultRule})`;\r\n  }\r\n}\r\n","import { HelperContext } from '../helpers.context';\r\n\r\nexport function parseCustomQuery(this: HelperContext, rawQuery: any): string {\r\n    const {\r\n        customSelectorAttr, customSelectorParamAttrPrefix,\r\n        customSelectorPrefix, _customSelectorPrefixEscaped,\r\n        pseudoSelectorPrefix, _pseudoSelectorPrefixEscaped,\r\n        pseudoSelectorMap\r\n    } = this;\r\n\r\n    if (typeof rawQuery !== 'string' ||\r\n        !rawQuery.includes(customSelectorPrefix) && !rawQuery.includes(pseudoSelectorPrefix)) {\r\n        return rawQuery;\r\n    }\r\n\r\n    const customSelectorRegExp = new RegExp(\r\n        `${_customSelectorPrefixEscaped}([a-z0-9_\\\\-]+)`,\r\n        'gi'\r\n    );\r\n\r\n    const customParamsRegExp = new RegExp(\r\n        `${_customSelectorPrefixEscaped}\\\\(([^)]+)\\\\)`,\r\n        'gi'\r\n    );\r\n\r\n    return (rawQuery.includes(pseudoSelectorPrefix) ? parsePseudoSelectors(rawQuery, pseudoSelectorMap) : rawQuery)\r\n        .replace(customSelectorRegExp, `[${customSelectorAttr}=\"$1\"]`)\r\n        .replace(customParamsRegExp, paramsReplacer);\r\n\r\n    ///\r\n\r\n    function parsePseudoSelectors(rawQuery: string, pseudoSelectorMap: Record<string, string>) {\r\n        const pseudoRegExp = new RegExp(\r\n            `${_pseudoSelectorPrefixEscaped}(?<pseudoSelector>[a-z0-9_\\-]+)(=(?<name>(\"[^\"]+\")|([a-z0-9_\\-]+)))?`,\r\n            'gi'\r\n        );\r\n\r\n        return rawQuery.replaceAll(pseudoRegExp, pseudoSelectorReplacer);\r\n\r\n        ///\r\n\r\n        function pseudoSelectorReplacer(...args: any[]) {\r\n            const groups = args.at(-1);\r\n            const {pseudoSelector, name} = groups;\r\n\r\n            if (name) {\r\n                const selector = pseudoSelectorMap[`${pseudoSelector}=$name`];\r\n                if (!selector) throw `Unknown pseudo-selector ${pseudoSelector}=$name`;\r\n                return selector.replace('$name', name);\r\n            }\r\n\r\n            const selector = pseudoSelectorMap[pseudoSelector];\r\n            if (!selector) throw `Unknown pseudo-selector ${pseudoSelector}`;\r\n            return pseudoSelectorMap[pseudoSelector];\r\n        }\r\n    }\r\n\r\n    function paramsReplacer(substring: string, paramsStr: string): string {\r\n        return paramsStr\r\n            .split(',')\r\n            .map(param => param.trim().split('='))\r\n            .reduce(paramsReducer, '');\r\n\r\n        ///\r\n\r\n        function paramsReducer(result: string, paramsTuple: string[]): string {\r\n            const [name, value] = paramsTuple;\r\n            return result + `[${customSelectorParamAttrPrefix}${name}=${value}]`\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":[],"version":3,"file":"module.js.map"}